---
title: Exploratory Testing
weight: 3
---

# <%= current_page.data.title %>

Exploratory testing is a manual process, where we analyse the application by utilising the ideological approach and imagination power.

Moreover, Exploratory testing does not have any specific method to follow. Also, there will be no scripted test cases that we follow. It’s Ad-hoc. We have to validate the application on the fly.

### Add Exploratory testing to your existing test Strategy

Exploratory testing is random or unstructured in nature and can reveal bugs that would go undiscovered during structured phase of testing. Some benefits include

1. The application becomes more reliable and trustworthy.
2. Real time performance of the application.
3. Fills the gaps that automation has left.
4. No scripted tests cases.
5. More you explore your application, more robust and interactive your application will become.

### Structure your exploratory testing

Even though the testing method does not have any set approach, it should be carried by following a structure. Also, exploratory testing does not mean starting from anywhere and go anywhere.

if you blindly perform exploratory testing you lose the proper orientation.

Hence to perform result-oriented exploratory testing, always follow the structure of exploratory testing so that you could make justification with the task.

### Use a destructive mindset

Watch out for bugs, design issues, slow response times, missing or misleading error messages and everything else that would annoy you as a user of your software.

### Document everything you find for later

Exploratory testing helps formalise the findings and document it.

With the help of visual feedback and collaborative testing tools, everyone can participate in exploratory testing.  This enables teams to react and adapt to changes quickly – facilitating an agile workflow.

### Try and automate the bugs you found through Exploratory Testing

This way there won’t be any regressions in the future for the same bugs if they occur.

### Exploratory testing is not a good idea for regulated or compliance based applications

Especially with any type of testing that is regulated or compliance-based, scripted testing is the way to go.

In compliance based testing, where certain checklists and mandates need to be followed for legal reasons, it is advised to stick to scripted testing.

One example of this is accessibility testing where several laws govern the testing protocol and there are defined standards that need to be passed.
