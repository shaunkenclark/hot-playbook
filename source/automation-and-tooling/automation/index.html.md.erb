---
title: Test and Quality Aproach for Services Developed Using "Automation"
weight: 3
---

# <%= current_page.data.title %>

<div id="main-content" class="wiki-content">
                           
        <h3 id="TestandQualityapproachforservicesdevelopedusing'automation'-Background:"><span class="handy-header aui-icon aui-icon-small aui-iconfont-link" title="Copy link"></span><strong>Background:</strong></h3><p><br><span style="color: rgb(23,43,77);">It has been identified that one of the areas that we believe we need to focus on within HoSE, is establishing the test and Quality approach for services developed using the 'automation' approach and environments.</span><br><span style="color: rgb(23,43,77);">&nbsp;</span><br><span style="color: rgb(23,43,77);">We have an established testing and QA approach/standard established (under CFT Reform) for services developed under the standard 'Java stack' but we don't have a parallel approach/standard for 'automation' to our knowledge.</span><br><span style="color: rgb(23,43,77);">&nbsp;</span><br><span style="color: rgb(23,43,77);">The current 'push' under HoSE is to look to make a recommendation regarding an 'automation' tool and the 'point and click' type tools provided by the PowerPlatform seem to be front-running in this exercise.</span><br><span style="color: rgb(23,43,77);">&nbsp;</span><br><span style="color: rgb(23,43,77);">On that basis, it may well make sense to investigate and capture the approach / standards that could / would be adoptable, should the PowerPlatform be in-turn, adopted. &nbsp;</span><br><span style="color: rgb(23,43,77);">&nbsp;</span><br><span style="color: rgb(23,43,77);">This would make a useful companion and input element to the exercise that our team i</span><span style="color: rgb(23,43,77);">s currently undertaking too i.e. if we go this way, how is Quality established and verified.</span><br><span style="color: rgb(23,43,77);">&nbsp;</span><br><span style="color: rgb(23,43,77);">Within DTS, there has been a recent development using elements of the PowerPlatform e.g. to our knowledge Pre-Recorded Evidence (PRE) has utilised PowerApps (from the PowerPlatform tool set) so this may be a good starting point to begin an analysis of how testing has been undertaken within PRE and ultimately how a Quality baseline has been assured, prior to MVP deployment to Production.</span></p><h3 id="TestandQualityapproachforservicesdevelopedusing'automation'-ListofactionsIdentifiedtoperformthistask."><span class="handy-header aui-icon aui-icon-small aui-iconfont-link" title="Copy link"></span>List of actions Identified to perform this task.</h3><ol><li>Establish contact with the PRE team</li><li>Perform analysis to understand the test approach undertaken within PRE</li><li>Review this test approach - compare and align the testing standard objectives (levels) against the standards established for CFT (standard Java stack)</li><li>Align standards against existing approach/standards - highlighting differences and why they differ using 'automation' (e.g. automated testing may not be possible in an 'automation' environment - for whatever reason, the tooling will be different i.e. SonarCube can't be utilised, so XYZ is used, is Zap (or whatever tool is used now on CFT Reform) adaptable for establishing an OWASP security standard, etc etc etc...).</li><li>Examine 'industry' standards and align/tweak to accommodate, as appropriate</li><li>Examine how other 'automation' testing has been undertaken to date within DTS e.g. how do we test RPA using the UIPath toolset - and does this differ from 'automation' using PowerPlatform - if there are differences - what are they, why do they exist and is it ok?.</li><li>Document recommended standard for 'automation' testing</li><li>Validate</li><li>Socialise</li><li>Support Uptake Drive.</li></ol><h3 id="TestandQualityapproachforservicesdevelopedusing'automation'-ThecurrentTestapproachwithinthePREteam"><span class="handy-header aui-icon aui-icon-small aui-iconfont-link" title="Copy link"></span>The current Test approach with in the PRE team</h3><p>Because the nature of Low code PowerApps application development with PowerApp platform Test approach will differ from traditional web app testing. PRE QA team will try to fit reform<span>&nbsp;</span><a rel="nofollow" href="https://tools.hmcts.net/confluence/display/RQA/Testing+Standards">Test standard</a>s as many as applicable to PowerApps</p><p><span class="confluence-embedded-file-wrapper confluence-embedded-manual-size"><span class="confluence-embedded-file-wrapper confluence-embedded-manual-size"><img class="confluence-embedded-image" draggable="false" height="150" src="/confluence/download/attachments/1572573679/image2022-2-8_16-25-19.png?version=1&amp;modificationDate=1652105729315&amp;api=v2&amp;__ncforminfo=3P1isV4Po1pQcZbMhN997KrFivyBGaZuUnRZKsn0tg-wFtcMGMlfLcdk8U5tWK9AZWT5xSNWwtmsU6x4kgODVcmvnb7af8VMN-iHRL28hg5hEz8rvd969Q==" data-image-src="/confluence/download/attachments/1572573679/image2022-2-8_16-25-19.png?version=1&amp;modificationDate=1652105729315&amp;api=v2" data-unresolved-comment-count="0" data-linked-resource-id="1576344869" data-linked-resource-version="1" data-linked-resource-type="attachment" data-linked-resource-default-alias="image2022-2-8_16-25-19.png" data-base-url="https://tools.hmcts.net/confluence" data-linked-resource-content-type="image/png" data-linked-resource-container-id="1572573679" data-linked-resource-container-version="11" alt=""></span></span></p><h4 id="TestandQualityapproachforservicesdevelopedusing'automation'-StaticQA:"><span class="handy-header aui-icon aui-icon-small aui-iconfont-link" title="Copy link"></span>Static QA:</h4><p>The following Test Stages will be run before deployment of app to power platform</p><ol><li>Solution Checker - &nbsp;<a class="external-link" href="https://docs.microsoft.com/en-us/power-platform/alm/devops-build-tool-tasks" rel="nofollow">https://docs.microsoft.com/en-us/power-platform/alm/devops-build-tool-tasks</a></li><li>SonarQube&nbsp; for Top-10 Vulnerabilities. - &nbsp;<a href="https://www.sonarqube.org/features/security/owasp/" rel="nofollow" class="external-link">https://www.sonarqube.org/features/security/owasp/</a></li><li>Dependency Checker -&nbsp;</li><li>Accessibility testing - Using pa11y and<span>&nbsp;</span><a class="external-link" href="https://docs.microsoft.com/en-us/powerapps/maker/canvas-apps/accessible-apps" rel="nofollow">https://docs.microsoft.com/en-us/powerapps/maker/canvas-apps/accessible-apps</a></li></ol><h4 id="TestandQualityapproachforservicesdevelopedusing'automation'-DynamicQA:"><span class="handy-header aui-icon aui-icon-small aui-iconfont-link" title="Copy link"></span>Dynamic QA:</h4><ol><li>Smoke Test&nbsp; -&nbsp; First happy path scenario before progressing build different environment</li><li>Automated Acceptance Test (Functional UI Test) -&nbsp; &nbsp;Using SpecFlow + Playwright + .Net</li></ol><h4 id="TestandQualityapproachforservicesdevelopedusing'automation'-ManualQA:"><span class="handy-header aui-icon aui-icon-small aui-iconfont-link" title="Copy link"></span>Manual QA:</h4><p>Any tests which can't automated like below will be covered as a part of the Manual QA using tool Zephyr for Jira.</p><ol><li>Video Controls</li><li>Video latency</li><li>Visual representations</li><li>Time bound acceptance criteria</li></ol><p><span style="color: rgb(23,43,77);">Automation testing tools consider for PRE team is as follows.</span></p><ol><li><span style="color: rgb(23,43,77);">Test Studio</span></li><li><span style="color: rgb(23,43,77);">PlayWright</span></li><li><span style="color: rgb(23,43,77);">Cypress</span></li></ol><p><br></p><p><span style="color: rgb(23,43,77);">Please see below the comparisons of what can/ can't be done with each of these tools.&nbsp;</span></p><p><br></p><div class="table-wrap"><table class="wrapped confluenceTable tablesorter tablesorter-default stickyTableHeaders" role="grid" style="padding: 0px;" resolved=""><thead class="tableFloatingHeaderOriginal"><tr role="row" class="tablesorter-headerRow"><th style="text-align: left; user-select: none;" class="confluenceTh tablesorter-header sortableHeader tablesorter-headerUnSorted" data-column="0" tabindex="0" scope="col" role="columnheader" aria-disabled="false" unselectable="on" aria-sort="none" aria-label=": No sort applied, activate to apply an ascending sort"><div class="tablesorter-header-inner"><br></div></th><th style="text-align: left; user-select: none;" class="confluenceTh tablesorter-header sortableHeader tablesorter-headerUnSorted" data-column="1" tabindex="0" scope="col" role="columnheader" aria-disabled="false" unselectable="on" aria-sort="none" aria-label="Cypress: No sort applied, activate to apply an ascending sort"><div class="tablesorter-header-inner"><p>Cypress</p></div></th><th style="text-align: left; user-select: none;" class="confluenceTh tablesorter-header sortableHeader tablesorter-headerUnSorted" data-column="2" tabindex="0" scope="col" role="columnheader" aria-disabled="false" unselectable="on" aria-sort="none" aria-label="Playwright: No sort applied, activate to apply an ascending sort"><div class="tablesorter-header-inner"><p>Playwright</p></div></th><th style="text-align: left; user-select: none;" class="confluenceTh tablesorter-header sortableHeader tablesorter-headerUnSorted" data-column="3" tabindex="0" scope="col" role="columnheader" aria-disabled="false" unselectable="on" aria-sort="none" aria-label="Test studio: No sort applied, activate to apply an ascending sort"><div class="tablesorter-header-inner"><p>Test studio</p></div></th></tr></thead><thead class="tableFloatingHeader" style="display: none;"><tr role="row" class="tablesorter-headerRow"><th style="text-align: left; user-select: none;" class="confluenceTh tablesorter-header sortableHeader tablesorter-headerUnSorted" data-column="0" tabindex="0" scope="col" role="columnheader" aria-disabled="false" unselectable="on" aria-sort="none" aria-label=": No sort applied, activate to apply an ascending sort"><div class="tablesorter-header-inner"><br></div></th><th style="text-align: left; user-select: none;" class="confluenceTh tablesorter-header sortableHeader tablesorter-headerUnSorted" data-column="1" tabindex="0" scope="col" role="columnheader" aria-disabled="false" unselectable="on" aria-sort="none" aria-label="Cypress: No sort applied, activate to apply an ascending sort"><div class="tablesorter-header-inner"><p>Cypress</p></div></th><th style="text-align: left; user-select: none;" class="confluenceTh tablesorter-header sortableHeader tablesorter-headerUnSorted" data-column="2" tabindex="0" scope="col" role="columnheader" aria-disabled="false" unselectable="on" aria-sort="none" aria-label="Playwright: No sort applied, activate to apply an ascending sort"><div class="tablesorter-header-inner"><p>Playwright</p></div></th><th style="text-align: left; user-select: none;" class="confluenceTh tablesorter-header sortableHeader tablesorter-headerUnSorted" data-column="3" tabindex="0" scope="col" role="columnheader" aria-disabled="false" unselectable="on" aria-sort="none" aria-label="Test studio: No sort applied, activate to apply an ascending sort"><div class="tablesorter-header-inner"><p>Test studio</p></div></th></tr></thead><colgroup><col><col><col><col></colgroup><tbody aria-live="polite" aria-relevant="all"><tr role="row"><td style="text-align: left;" class="confluenceTd">Multiple Domain support</td><td style="text-align: left;" class="confluenceTd">&nbsp;No</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">No</td></tr><tr role="row"><td style="text-align: left;" class="confluenceTd">Authentication process setup</td><td style="text-align: left;" class="confluenceTd">&nbsp;Long</td><td style="text-align: left;" class="confluenceTd">easy</td><td style="text-align: left;" class="confluenceTd">Yes</td></tr><tr role="row"><td style="text-align: left;" class="confluenceTd">webkit support (safari)</td><td style="text-align: left;" class="confluenceTd">No</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">Yes</td></tr><tr role="row"><td style="text-align: left;" class="confluenceTd">Multiple browsers at the same time</td><td style="text-align: left;" class="confluenceTd">No</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">No</td></tr><tr role="row"><td style="text-align: left;" class="confluenceTd">Mature community</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">No</td></tr><tr role="row"><td style="text-align: left;" class="confluenceTd">Iframe support</td><td style="text-align: left;" class="confluenceTd">Limited(no)</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">Yes</td></tr><tr role="row"><td style="text-align: left;" class="confluenceTd">Hover support</td><td style="text-align: left;" class="confluenceTd">No</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">No</td></tr><tr role="row"><td style="text-align: left;" class="confluenceTd">Licensing required for some tools&nbsp;</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">No</td><td style="text-align: left;" class="confluenceTd">Yes</td></tr><tr role="row"><td style="text-align: left;" class="confluenceTd">support for multiple Language</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">No</td></tr><tr role="row"><td style="text-align: left;" class="confluenceTd">Recording tool</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">Yes</td></tr><tr role="row"><td style="text-align: left;" class="confluenceTd">Network Monitoring</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">No</td></tr><tr role="row"><td style="text-align: left;" class="confluenceTd"><p>Video and Screen capture</p></td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">No</td></tr><tr role="row"><td style="text-align: left;" class="confluenceTd"><p>Test readability and maintainability</p></td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">No</td></tr><tr role="row"><td style="text-align: left;" class="confluenceTd"><p>Execution speed with automatic wait</p></td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">Yes</td><td style="text-align: left;" class="confluenceTd">No</td></tr></tbody></table></div><div class="table-wrap"><table class="wrapped confluenceTable" resolved=""><tbody><tr><td class="confluenceTd">Testing Type</td><td class="confluenceTd">Process For Automation-Type</td></tr><tr><td class="confluenceTd">Testing during the development</td><td class="confluenceTd">1. Devloper should test each step working as expected as soon as they add the step.<br><br>If the App use any custom code, then it should adhere to the following standards<br>All new code and re-factored (legacy) code should be unit tested.<br>Every test includes an assert<br><br>Scope of tests will include valid, invalid &amp; edge cases derived during 3 Amigo (or similar meeting)<br>JIRA tasks related to unit tests<br>Coverage criteria is &gt; 80%<br>Sonar-cloud code quality criteria met (i.e. Duplicated Lines &lt; 3%)</td></tr><tr><td class="confluenceTd">Static analysis</td><td class="confluenceTd">1. Flow Checker: No errors should be reported by flow checker <br>2. Solution Checker: No errors should be reported by solution checker<br>Please Note:&nbsp; These checkers only applicable for power Platform</td></tr><tr><td class="confluenceTd">Integration Testing</td><td class="confluenceTd">1. All integrations with custom conectors are tested.<br>2. Dataverse is a feature of power platform and not an external component, we should still need some level of testing to make sure everything is working as expected.<br>3. Integration test report should be published to CI/CD pipeline.<br>4. Jira tasks created for integration tests</td></tr><tr><td class="confluenceTd">Smoke Testing</td><td class="confluenceTd">1. First happy path scenario should be tested before progressing build to different environment.</td></tr><tr><td class="confluenceTd">UI Functional</td><td class="confluenceTd">1. Consider Test Pyramid, UI functional tests sits at the top of the pyramid and only write critical path scenarios. Keep it to minimum.<br>2. Make sure no duplication of the tests from previous testing type (other levels of the test pyramid)<br>3. Use the tools such as PlayWright, Codecept JS, Protractor or similar.<br>4. Make sure to use the tools that produces test reports and the same will be published via Jenkins</td></tr><tr><td class="confluenceTd">Manual &amp; Exploratory Testing</td><td class="confluenceTd">1. Any tests that were not possible to automate must be reviewed and documented (in Zephyr or simiar).<br>2. Make sure to run these manual tests everytime we release.</td></tr><tr><td class="confluenceTd">Performance Testing</td><td class="confluenceTd">"Response time are measured by 95th percentiles<br>UI - 1500ms<br>Volume (Throughput) - defined at the project level<br>User Concurrency - defined at the project level<br>Pipeline - 10 users minimum<br>Server utlisation<br>ASE - I2 | 2 - 60% CPU &amp; RAM<br>Containers - 60% CPU &amp; RAM<br>Cluster - 60% CPU &amp; RAM (total - all Containers)"</td></tr><tr><td class="confluenceTd">Security Testing</td><td class="confluenceTd">Yarn audit and Helmet running<br>Zap Overnights implemented</td></tr><tr><td class="confluenceTd">External Pen Testing</td><td class="confluenceTd">ITHC completed / scheduled where applicable<br>Outstanding issues?<br>Test Report Stats?</td></tr><tr><td class="confluenceTd">Accessability Testing</td><td class="confluenceTd"><p>1. Pa11y - all pages spidered - no outstanding AA or A compliancy failures.<br>2. Accessability checker in powerApps helps highlight the common accessability issues.<br>Compliant with WCAG 2.1 (update includes devices)<br>Manual device testing - windows NVDA / JAWS. Mac VoiceOver, Keyboard, iOS/ Android mobile and tablet<br>DAC audit completed / Scheduled where applicable - especially after major code changes<br>Outstanding issues?<br>Test Report Stats?<br>Accessibility statement up-to-date</p></td></tr></tbody></table></div><p><br></p><p><span>Proper testing methods and techniques become even more important to make the transition to RPA as successful as possible. Although RPA testing practices are similar to that of other types of software testing.</span></p><p><br></p><ol><li><strong>Understand the business process</strong><span>. As a process is being automated, it will go through many changes. Before any testing activities can begin, the primary goal of the test team should be to fully understand the newly automated process. This is one of the most important steps in the test cycle because it lays the foundation on which the other steps are built. The best way to understand the process is to review the Process Definition Document (PDD), the Solution Design Document (SDD) and any other documentation that was created during the design phase of the automation. Once the team understands the business process, it can move on to the next step, creating the test scenarios to test the code against the business rules.</span></li><li><strong>Test scenarios.</strong><span> Now it’s time to verify the automation has been developed according to the business rules documented in the design documents. The key to having good test scenarios is to make sure they are clear, concise and cover each business rule noted in the PDD/SDD. Usually, the SDD lists the required scenarios that need to be validated during testing, but it’s also important to review the process flows and cross-verify the SDD for any missing information.</span></li><li><strong>Test scripts.</strong><span> This stage requires putting together the information you’ve previously gathered. The test script is made up of numerous test cases with a variety of explicit outcomes. It is typically in an Excel format and will contain the test scenarios, input data requirements for testing the scenarios, expected and actual results, and a pass or fail column. Like the test scenarios, it is best to write the script clearly and concisely. The more thorough the script, the less chance of gaps or missed test scenarios. Depending on the complexity of the process, it can be a good idea to have the design team review the script and make any changes or suggestions. This additional step can help eliminate any gaps that may arise during testing.</span></li><li><strong>Test the data</strong><span>. Test data is the fuel for the fire. Without valid test data, automation testing can lead to inaccurate test results, which can lead to invalid defects, often creating a strain on the testing timeline. This is why it’s important to have a clear understanding of what type of data and format you need for a successful testing cycle.</span></li><li><strong>Manage defects.</strong><span> As expected with any automation testing, defects will be found. The team must document the defects and notify the development team. The key to effective defect management is detail. The more information the test team can provide, the quicker the correction can be made. Some ways to provide details include: writing the test-case description, taking a screenshot of the error, recording where the process is failing, attaching the input file used to test, and attaching the output file produced by the automation.</span></li></ol><p><br></p><p><br></p>

                
        
    
        <span class="tf-inline-filter" title="Filter column"></span><div class="tf-inline-btn-container">
        
        <div id="tfn"></div>
