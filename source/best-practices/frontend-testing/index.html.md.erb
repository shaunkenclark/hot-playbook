---
title: Testing Frontend Applications
weight: 3
---

# <%= current_page.data.title %>

### Write as few end to end tests as possible

End-to-end tests require a lot of maintenance and run pretty slowly.

Due to their high maintenance cost you should aim to reduce the number of end-to-end tests to a bare minimum.

Given that a high level of confidence can be achieved through lower levels of testing, the role of end-to-end tests is to make sure everything ties together and there are no high level disagreements between the microservices. As such, comprehensively testing business requirements at this level is wasteful, especially given the expense of end-to-end tests in time and maintenance.

One strategy that works well in keeping an end-to-end test suite small is to apply a <strong>time budget</strong>, an amount of time the team is happy to wait for the test suite to run. As the suite grows, if the run time begins to exceed the time budget, the least valuable tests are deleted to keep within the allotted time. The time budget should be of the order of minutes, not hours.

### Create test data smartly

<em>A good automation test is the one which creates and cleans up the needed data after use.</em>

By following this rule of thumb for good automation, we would have ended up with tests which spend more time creating the test data rather than testing it! We can’t compromise on good practices in order to have faster builds, can we?

Most of the automated tests create test data through a browser. It would be very effective if we create test data directly in the database. DB calls are cost and time efficient. By reducing the UI interaction, the test becomes fast and more reliable. 

### Think before you use Xpaths

Xpaths are favourite locators to some. Most of us fail to realise that locator selectors contribute to the execution speed of tests in a big way. When xpaths are used for object identification, a lot of the background processing/filtering happens. 

Xpath identification is generally slower than other forms of object identifications. Therefore, it always helps to identify objects with direct attributes like ID, Name, etc. You can use CSS selectors as an alternative. But try and keep Xpaths as your last saviour. The result of these locator strategies can be seen gradually over the period of time.

I think following is best hierarchy:

1. <strong>Id:</strong> By ID for each and every element is always unique so easy to access for us and fast for web driver.Mostly we should prefer Id as first priority to find element.
2. <strong>Name:</strong> If By ID is not Ok then we should look at “Name”. But many time it happens that multiple name is there so need to take care for this if same name attribute is multiple times there.
3. <strong>Linktext:</strong> By linktext is also great ways to find element if all links in site have unique link text
4. <strong>Partial Linktext:</strong> If not full linkText, By partial linktext" is also next preferred way.
5. <strong>Tag Name:</strong> If your site or page has group elements like dropdown , checkboxes then you can use attribute “By tagname” to find element.
6. <strong>class name:</strong> By “Class name” is rare way to find element because most of website using same class name for multiple items to apply css. But sure you can use it for unique class names.
7. <strong>Css:</strong> If you need speed to locate complex elements then kindly use attribute “Css selector” to find element.
8. <strong>Xpath:</strong> Main use of “Xpath” attribute to navigate for xml documents. Still you can use it for web page or site.

Note : Basically selection of element locator depends on your page that which type of things page contains like too many dropdowns , checkboxes, textboxes and a lot more. But my given steps are general which you can follow for any site to find elements and execute program in smooth way.

### Use Conditional Waits

Wait statements are added in tests when we navigate between pages, or when we wait for the asynchronous call to finish.These wait statements are deadly as they make tests slow, are less reliable and at times flaky/brittle.

Try to consciously eliminate wait statements in your tests. Replace all generic wait statements with conditional waits (such as the wait for a page load to finish or an element to appear etc). Conditional waits will then wait only for a specific action/event to occur and proceed with execution as soon as it is complete.
