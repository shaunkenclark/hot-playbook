---
title: End to End (Functional) Testing
weight: 3
---

# <%= current_page.data.title %>

End-to-end testing (E2E testing) is the process of testing a piece of software from start to finish as it will be used by the actual users.

For a web application, you would start a browser, navigate to the correct URL, use the application as intended, and verify the behaviour.

If you’re testing an API, you would make calls just like the real clients would do.

In the case of desktop application, you would start up the application, use it, and verify its behaviour too.

Whatever your piece of software that you want to perform the end to end testing on, the idea is to run the application with all of its dependencies: database, external services, metrics, logging, etc. This can still be in a test environment, separate from the production environment. But ideally, this test environment resembles the production environment as closely as possible.

Here are some best practices you would want to consider.

### Leverage the test Automation

Many aspects of software testing can be automated, and the benefits of automating are plenty. If you can automate something and you plan on repeating the testing of it, you probably should do it.

You can only be confident in the quality of the code you’re shipping if you retest the entire application every time someone makes a change to it, no matter how insignificant it seems. Even a small change can lead to regression issues, testing the full regression pack manually for each small change is time consuming. If you still want to release software on time, leverage automated testing.

### Reconsider failing and flaky test

When an E2E test is failing consistently and nobody cares to fix it, that means the test isn’t useful and is flaky. There’s no point in having it around. Flaky in this case means that the test can fail sporadically for unrelated reasons. For example, this often happens when the testing code has assumptions about time: “press button A, wait 2 seconds, press button B” (see section above).

If a test is unreliable and jumps between pass-fail without any code changes, this can be considered as a flaky test and we should consider re-writing the test or deleting it all together

### Avoid Exception Testing

E2E Testing is best used to test common user scenarios. When it comes to exceptional user scenarios, use integration testing, or low-level unit testing.

### Use REST API End to End tests

Avoiding a graphical user interface when testing your application can be a good idea to come up with tests that are less flaky than full E2E tests while still covering a broad part of your application’s stack. 

### Move the tests to Lower Levels of the Pyramid

When an End to End test is failed genuinely and there is no test covering the issue in the lower levels move the test to the lower levels. Always try to move the tests as low as possible in the test pyramid. As a result of moving the test to the lower levels and do not afraid to delete the test if the test is not providing any extra value at the higher levels. Likewise avoid duplicating test scenarios in the e2e test suite that are already covered by tests lower down in the in the pyramid

### E2E Tests in the pipeline

The goal of adding E2E tests to the pipeline is to catch any errors or failing tests before code is shipped to production.

Consider integrating the E2E tests in the CI/CD pipeline as follows:

1. Running the a few core tests every time new code gets pushed.
2. Running the full set of E2E tests in the nightly pipeline.

Run the full set of E2E tests in the nightly build and execute a core subset of these on every code change as part of the CD pipeline. The reason for this is because E2E tests are slow and sometimes flaky to run. We don’t want these tests to slow down our pipeline since it will delay our process and development cycle.  Running the full set of E2E tests on a regular basis will lets us know if we have introduced a breaking change.

### Don’t ignore flaky tests. React as soon as possible.

When you discover that a test is flaky, you should react as soon as possible; if you allow yourself to ignore flaky tests, things can only worsen. Likewise, when you write tests, it’s also helpful to consider how and where they might be flaky. You can add conditional waits etc that will make the test a bit more solid, which will help insulate your tests from the possibility of flakiness.

### E2E tests should execute later in the build pipeline

To get the faster feedback from the fast running tests from lower levels of testing, build the pipeline in such a way that lower level tests run first and then the E2E tests. 

### Create test data smartly

<em>A good automation test is the one which creates and cleans up the needed data after use.</em>

By following this rule of thumb for good automation, we would have ended up with tests which spend more time creating the test data rather than testing it! We can’t compromise on good practices in order to have faster builds, can we?

Most of the automated tests create test data through a browser. It would be very effective if we create test data directly in the database. DB calls are cost and time efficient. By reducing the UI interaction, the test becomes fast and more reliable. 

## Specific to UI 

### Write as few end to end tests as possible

End-to-end tests require a lot of maintenance and run pretty slowly.

Due to their high maintenance cost you should aim to reduce the number of end-to-end tests to a bare minimum.

Given that a high level of confidence can be achieved through lower levels of testing, the role of end-to-end tests is to make sure everything ties together and there are no high level disagreements between the microservices. As such, comprehensively testing business requirements at this level is wasteful, especially given the expense of end-to-end tests in time and maintenance.

One strategy that works well in keeping an end-to-end test suite small is to apply <strong>a time budget</strong>, an amount of time the team is happy to wait for the test suite to run. As the suite grows, if the run time begins to exceed the time budget, the least valuable tests are deleted to keep within the allotted time. The time budget should be of the order of minutes, not hours.

### Think before you use Xpaths

Xpaths are favourite locators to some. Most of us fail to realise that locator selectors contribute to the execution speed of tests in a big way. When xpaths are used for object identification, a lot of the background processing/filtering happens. 

Xpath identification is generally slower than other forms of object identifications. Therefore, it always helps to identify objects with direct attributes like ID, Name, etc. You can use CSS selectors as an alternative. But try and keep Xpaths as your last saviour. The result of these locator strategies can be seen gradually over the period of time.

I think following is best hierarchy:

1. <strong>Id:</strong> By ID for each and every element is always unique so easy to access for us and fast for web driver.Mostly we should prefer Id as first priority to find element.
2. <strong>Name:</strong> If By ID is not Ok then we should look at “Name”. But many time it happens that multiple name is there so need to take care for this if same name attribute is multiple times there.
3. <strong>Linktext:</strong> By linktext is also great ways to find element if all links in site have unique link text
4. <strong>Partial Linktext:</strong> If not full linkText, By partial linktext" is also next preferred way.
5. <strong>Tag Name:</strong> If your site or page has group elements like dropdown , checkboxes then you can use attribute “By tagname” to find element.
6. <strong>class name:</strong> By “Class name” is rare way to find element because most of website using same class name for multiple items to apply css. But sure you can use it for unique class names.
7. <strong>Css:</strong> If you need speed to locate complex elements then kindly use attribute “Css selector” to find element.
8. <strong>Xpath:</strong> Main use of “Xpath” attribute to navigate for xml documents. Still you can use it for web page or site.

Note : Basically selection of element locator depends on your page that which type of things page contains like too many dropdowns , checkboxes, textboxes and a lot more. But my given steps are general which you can follow for any site to find elements and execute program in smooth way.

### Use Conditional Waits

Wait statements are added in tests when we navigate between pages, or when we wait for the asynchronous call to finish.These wait statements are deadly as they make tests slow, are less reliable and at times flaky/brittle.

Try to consciously eliminate wait statements in your tests. Replace all generic wait statements with conditional waits (such as the wait for a page load to finish or an element to appear etc). Conditional waits will then wait only for a specific action/event to occur and proceed with execution as soon as it is complete.

### Ensure that e2e Tests failures in the pipeline are recreatable locally

In some cases the cause of test failure is obvious. This means that you can fix the test and close the case quickly. The problem arises when it’s not immediately clear why a test is failing. In such cases, you will need to analyze all the logs and data to determine the root cause of the failure and hopefully identify the fix. If it is still not clear what the issue is then it may be necessary to recreate the test failure locally. One of the key things to bear in mind here is that environmental issues may be at play here and in order to recreate the failing test we’ll need to point out local set up to AAT. In order to do this we may need to play around with properties files by adding values from the AAT az key vaults etc. Add clear instructions in the projects’s ReadMe.txt file as to how to point your local IDE to AAT
